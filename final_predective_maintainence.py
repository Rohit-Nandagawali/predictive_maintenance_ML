# -*- coding: utf-8 -*-
"""final predective maintainence.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nEu7AeSwL-oPSrQ0LDLmoFVkP-oI0xui
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, confusion_matrix

# Load the dataset
df = pd.read_csv("predictive_maintenance.csv")

# Display the first few rows of the dataframe
print(df.head())

# Summary statistics
print(df.describe())

# Check for missing values
print(df.isnull().sum())

# Visualize the distribution of the target variable
sns.countplot(x='Failure Type', data=df)
plt.title('Distribution of Failure Types')
plt.xticks(rotation=45)  # Rotate x-axis labels

plt.show()

# Visualize relationships between numerical features and target variable
sns.pairplot(df, hue='Failure Type', diag_kind='hist')
plt.show()

# Drop 'UDI' column
df.drop(columns=['UDI'], inplace=True)

# Encode 'Failure Type' variable
failure_type_map = {
    'Tool_Wear_Failure': 0,
    'Power_Failure': 1,
    'Overstrain_Failure': 2,
    'Heat_Dissipation_Failure': 3,
    'no_failure': 4,
    'random_failure': 5
}

# Split the data into features (X) and target variable (y)
X = df.drop(columns=['Failure Type'])
y = df['Failure Type']

X

y

# Define preprocessing steps for numerical and categorical features
numeric_features = X.select_dtypes(include=['float64', 'int64']).columns
categorical_features = X.select_dtypes(include=['object']).columns

from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer


# Define preprocessing steps for numerical features
numeric_transformer = Pipeline(steps=[
    ('scaler', StandardScaler())
])

# Define preprocessing steps for categorical features
categorical_transformer = Pipeline(steps=[
    ('onehot', OneHotEncoder(handle_unknown='ignore'))
])

# Define preprocessing for all features
preprocessor = ColumnTransformer(
    transformers=[
        ('num', numeric_transformer, numeric_features),
        ('cat', categorical_transformer, categorical_features)
    ])

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model 1: Random Forest
model_rf = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('classifier', RandomForestClassifier())
])

model_rf.fit(X_train, y_train)

y_pred_rf = model_rf.predict(X_test)

accuracy_rf = accuracy_score(y_test, y_pred_rf)
confusion_rf = confusion_matrix(y_test, y_pred_rf)

# Display results
print("Model: Random Forest")
print(f"Accuracy: {accuracy_rf}")
print("Confusion Matrix:")
print(confusion_rf)
print("\n")



# Model 2: Gradient Boosting
model_gb = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('classifier', GradientBoostingClassifier())
])
model_gb.fit(X_train, y_train)

y_pred_gb = model_gb.predict(X_test)
accuracy_gb = accuracy_score(y_test, y_pred_gb)
confusion_gb = confusion_matrix(y_test, y_pred_gb)

print("Model: Gradient Boosting")
print(f"Accuracy: {accuracy_gb}")
print("Confusion Matrix:")
print(confusion_gb)
print("\n")

# Model 3: Support Vector Machine
model_svm = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('classifier', SVC())
])
model_svm.fit(X_train, y_train)

y_pred_svm = model_svm.predict(X_test)
accuracy_svm = accuracy_score(y_test, y_pred_svm)
confusion_svm = confusion_matrix(y_test, y_pred_svm)

print("Model: Support Vector Machine")
print(f"Accuracy: {accuracy_svm}")
print("Confusion Matrix:")
print(confusion_svm)
print("\n")

# Define the models
models = {
    'RandomForest': RandomForestClassifier(),
    'GradientBoosting': GradientBoostingClassifier(),
    'SVM': SVC()
}

# Train and evaluate the models
accuracy_results = {}  # Dictionary to store accuracy results
for name, model in models.items():
    clf = Pipeline(steps=[('preprocessor', preprocessor),
                          ('classifier', model)])
    clf.fit(X_train, y_train)
    y_pred = clf.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    accuracy_results[name] = accuracy  # Store accuracy for each model

# Create a bar plot of accuracy
plt.figure(figsize=(10, 6))
plt.bar(accuracy_results.keys(), accuracy_results.values(), color=['blue', 'green', 'red'])
plt.xlabel('Models')
plt.ylabel('Accuracy')
plt.title('Comparison of Model Accuracy')
plt.ylim(0.9, 1.0)  # Set y-axis limits for better visualization
plt.show()

import seaborn as sns

# Train and evaluate the models
confusion_matrices = {}  # Dictionary to store confusion matrices
for name, model in models.items():
    clf = Pipeline(steps=[('preprocessor', preprocessor),
                          ('classifier', model)])
    clf.fit(X_train, y_train)
    y_pred = clf.predict(X_test)
    confusion = confusion_matrix(y_test, y_pred)
    confusion_matrices[name] = confusion  # Store confusion matrix for each model

# Plot confusion matrices
plt.figure(figsize=(18, 5))
for i, (name, confusion) in enumerate(confusion_matrices.items(), 1):
    plt.subplot(1, len(confusion_matrices), i)
    sns.heatmap(confusion, annot=True, cmap='Blues', fmt='d')
    plt.title(f'Confusion Matrix - {name}')
    plt.xlabel('Predicted Label')
    plt.ylabel('True Label')
plt.tight_layout()
plt.show()

from joblib import dump

# Train the Gradient Boosting model
model_gb = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('classifier', GradientBoostingClassifier())
])
model_gb.fit(X_train, y_train)

# Dump the model to a pickle file
dump(model_gb, 'gradient_boosting_model.pkl')

from joblib import load

# Load the model from the pickle file
model_gb_loaded = load('gradient_boosting_model.pkl')
# Sample new data with 'Target' column
new_data = pd.DataFrame({
    'Air temperature [K]': [299.0, 298.5, 301.2],
    'Process temperature [K]': [309.0, 307.5, 310.2],
    'Rotational speed [rpm]': [1500, 1450, 1550],
    'Torque [Nm]': [45.0, 40.0, 50.0],
    'Tool wear [min]': [150, 160, 140],
    'Product ID': ['L47257', 'H30501', 'L48689'],  # Sample values for 'Product ID'
    'Type': ['L', 'H', 'L'],  # Sample values for 'Type'
    'Target': [0, 1, 0]  # Binary values (0 or 1) for the 'Target' column
})

new_data

X_test

predictions = model_gb_loaded.predict(X_test)

# Display the predictions
for pred in predictions:
    if pred == 4:  # 'no_failure' label
        print("No maintenance needed, no failure")
    else:
        print(f"Failure type: {pred}, maintenance needed")

# Define the file path for the new CSV file
output_csv_file = 'X_test_data.csv'

# Convert the X_test DataFrame to a CSV file
X_test.to_csv(output_csv_file, index=False)

print(f"X_test data has been successfully saved to {output_csv_file}.")